import type { BaseEmbedding } from "@llamaindex/core/embeddings";
import type { BaseNode } from "@llamaindex/core/schema";
import { VectorStoreBase, type IEmbedModel, type VectorStoreNoEmbedModel, type VectorStoreQuery, type VectorStoreQueryResult } from "./types.js";
type MetadataValue = Record<string, any>;
declare class SimpleVectorStoreData {
    embeddingDict: Record<string, number[]>;
    textIdToRefDocId: Record<string, string>;
    metadataDict: Record<string, MetadataValue>;
}
export declare class SimpleVectorStore extends VectorStoreBase implements VectorStoreNoEmbedModel {
    storesText: boolean;
    private data;
    private persistPath;
    constructor(init?: {
        data?: SimpleVectorStoreData;
    } & Partial<IEmbedModel>);
    static fromPersistDir(persistDir?: string, embedModel?: BaseEmbedding): Promise<SimpleVectorStore>;
    get client(): any;
    get(textId: string): Promise<number[]>;
    add(embeddingResults: BaseNode[]): Promise<string[]>;
    delete(refDocId: string): Promise<void>;
    private filterNodes;
    query(query: VectorStoreQuery): Promise<VectorStoreQueryResult>;
    persist(persistPath?: string): Promise<void>;
    protected static persistData(persistPath: string, data: SimpleVectorStoreData): Promise<void>;
    static fromPersistPath(persistPath: string, embedModel?: BaseEmbedding): Promise<SimpleVectorStore>;
    static fromDict(saveDict: SimpleVectorStoreData, embedModel?: BaseEmbedding): SimpleVectorStore;
    toDict(): SimpleVectorStoreData;
}
export {};

import type { JSONValue } from "@llamaindex/core/global";
import { Document } from "@llamaindex/core/schema";
import { FileReader } from "./type.js";
export interface JSONReaderOptions {
    /**
     * Whether to ensure only ASCII characters.
     * Converts non-ASCII characters to their unicode escape sequence.
     * @default false
     */
    ensureAscii?: boolean;
    /**
     * Whether the JSON is in JSON Lines format.
     * Split into lines, remove empty lines, parse each line as JSON.
     * @default false
     */
    isJsonLines?: boolean;
    /**
     * Whether to clean the JSON by filtering out structural characters (`{}, [], and ,`).
     * If set to false, it will just parse the JSON, not removing structural characters.
     * @default true
     */
    cleanJson?: boolean;
    /**
     * Specifies how many levels up the JSON structure to include in the output. cleanJson will be ignored.
     * If set to 0, all levels are included. If undefined, parses the entire JSON and treats each line as an embedding.
     * @default undefined
     */
    levelsBack?: number;
    /**
     * The maximum length of JSON string representation to be collapsed into a single line.
     * Only applicable when `levelsBack` is set.
     * @default undefined
     */
    collapseLength?: number;
}
export declare class JSONReaderError extends Error {
}
export declare class JSONParseError extends JSONReaderError {
}
export declare class JSONStringifyError extends JSONReaderError {
}
/**
 * A reader that reads JSON data and returns an array of Document objects.
 * Supports various options to modify the output.
 */
export declare class JSONReader<T extends JSONValue> extends FileReader {
    private options;
    constructor(options?: JSONReaderOptions);
    private validateOptions;
    /**
     * Loads JSON data and returns an array of Document objects.
     *
     * @param {Uint8Array} content - The JSON data as a Uint8Array.
     * @return {Promise<Document[]>} A Promise that resolves to an array of Document objects.
     */
    loadDataAsContent(content: Uint8Array): Promise<Document[]>;
    private parseJsonString;
    private parseJsonLines;
    private parseJson;
    private createDocument;
    private prepareDepthFirstYield;
    private formatJsonString;
    /**
     * A generator function that determines the next step in traversing the JSON data.
     * If the serialized JSON string is not null, it yields the string and returns.
     * If the JSON data is an object, it delegates the traversal to the depthFirstTraversal method.
     * Otherwise, it yields the JSON data as a string.
     *
     * @param jsonData - The JSON data to traverse.
     * @param levelsBack - The number of levels up the JSON structure to include in the output.
     * @param path - The current path in the JSON structure.
     * @param collapseLength - The maximum length of JSON string representation to be collapsed into a single line.
     * @throws {JSONReaderError} - Throws an error if there is an issue during the depth-first traversal.
     */
    private depthFirstYield;
    private serializeAndCollapse;
    /**
     * A generator function that performs a depth-first traversal of the JSON data.
     * If the JSON data is an array, it traverses each item in the array.
     * If the JSON data is an object, it traverses each key-value pair in the object.
     * For each traversed item or value, it performs a depth-first yield.
     *
     * @param jsonData - The JSON data to traverse.
     * @param levelsBack - The number of levels up the JSON structure to include in the output.
     * @param path - The current path in the JSON structure.
     * @param collapseLength - The maximum length of JSON string representation to be collapsed into a single line.
     * @throws {JSONReaderError} - Throws an error if there is an issue during the depth-first traversal of the object.
     */
    private depthFirstTraversal;
    private convertToAscii;
}

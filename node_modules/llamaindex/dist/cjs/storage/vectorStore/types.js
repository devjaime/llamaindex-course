"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FilterCondition: function() {
        return FilterCondition;
    },
    FilterOperator: function() {
        return FilterOperator;
    },
    VectorStoreBase: function() {
        return VectorStoreBase;
    },
    VectorStoreQueryMode: function() {
        return VectorStoreQueryMode;
    }
});
const _EmbedModel = require("../../internal/settings/EmbedModel.js");
var VectorStoreQueryMode;
(function(VectorStoreQueryMode) {
    VectorStoreQueryMode["DEFAULT"] = "default";
    VectorStoreQueryMode["SPARSE"] = "sparse";
    VectorStoreQueryMode["HYBRID"] = "hybrid";
    // fit learners
    VectorStoreQueryMode["SVM"] = "svm";
    VectorStoreQueryMode["LOGISTIC_REGRESSION"] = "logistic_regression";
    VectorStoreQueryMode["LINEAR_REGRESSION"] = "linear_regression";
    // maximum marginal relevance
    VectorStoreQueryMode["MMR"] = "mmr";
})(VectorStoreQueryMode || (VectorStoreQueryMode = {}));
var FilterOperator;
(function(FilterOperator) {
    FilterOperator["EQ"] = "==";
    FilterOperator["IN"] = "in";
    FilterOperator["GT"] = ">";
    FilterOperator["LT"] = "<";
    FilterOperator["NE"] = "!=";
    FilterOperator["GTE"] = ">=";
    FilterOperator["LTE"] = "<=";
    FilterOperator["NIN"] = "nin";
    FilterOperator["ANY"] = "any";
    FilterOperator["ALL"] = "all";
    FilterOperator["TEXT_MATCH"] = "text_match";
    FilterOperator["CONTAINS"] = "contains";
})(FilterOperator || (FilterOperator = {}));
var FilterCondition;
(function(FilterCondition) {
    FilterCondition["AND"] = "and";
    FilterCondition["OR"] = "or";
})(FilterCondition || (FilterCondition = {}));
class VectorStoreBase {
    embedModel;
    constructor(embedModel){
        this.embedModel = embedModel ?? (0, _EmbedModel.getEmbeddedModel)();
    }
}

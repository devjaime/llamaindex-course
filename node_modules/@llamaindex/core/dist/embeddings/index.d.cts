import { Tokenizers } from '@llamaindex/env';
import { MessageContentDetail } from '../llms/index.cjs';
import { TransformComponent } from '../schema/index.cjs';

declare const DEFAULT_SIMILARITY_TOP_K = 2;
/**
 * Similarity type
 * Default is cosine similarity. Dot product and negative Euclidean distance are also supported.
 */
declare enum SimilarityType {
    DEFAULT = "cosine",
    DOT_PRODUCT = "dot_product",
    EUCLIDEAN = "euclidean"
}
/**
 * The similarity between two embeddings.
 * @param embedding1
 * @param embedding2
 * @param mode
 * @returns similarity score with higher numbers meaning the two embeddings are more similar
 */
declare function similarity(embedding1: number[], embedding2: number[], mode?: SimilarityType): number;

type EmbedFunc<T> = (values: T[]) => Promise<Array<number[]>>;
type EmbeddingInfo = {
    dimensions?: number;
    maxTokens?: number;
    tokenizer?: Tokenizers;
};
type BaseEmbeddingOptions = {
    logProgress?: boolean;
};
declare abstract class BaseEmbedding extends TransformComponent {
    embedBatchSize: number;
    embedInfo?: EmbeddingInfo;
    constructor();
    similarity(embedding1: number[], embedding2: number[], mode?: SimilarityType): number;
    abstract getTextEmbedding(text: string): Promise<number[]>;
    getQueryEmbedding(query: MessageContentDetail): Promise<number[] | null>;
    /**
     * Optionally override this method to retrieve multiple embeddings in a single request
     * @param texts
     */
    getTextEmbeddings: (texts: string[]) => Promise<Array<number[]>>;
    /**
     * Get embeddings for a batch of texts
     * @param texts
     * @param options
     */
    getTextEmbeddingsBatch(texts: string[], options?: BaseEmbeddingOptions): Promise<Array<number[]>>;
    truncateMaxTokens(input: string[]): string[];
}
declare function batchEmbeddings<T>(values: T[], embedFunc: EmbedFunc<T>, chunkSize: number, options?: BaseEmbeddingOptions): Promise<Array<number[]>>;

declare function truncateMaxTokens(tokenizer: Tokenizers, value: string, maxTokens: number): string;

export { BaseEmbedding, type BaseEmbeddingOptions, DEFAULT_SIMILARITY_TOP_K, type EmbeddingInfo, SimilarityType, batchEmbeddings, similarity, truncateMaxTokens };

import type { BaseEmbedding } from "@llamaindex/core/embeddings";
import type { BaseNode, ModalityType } from "@llamaindex/core/schema";
export interface VectorStoreQueryResult {
    nodes?: BaseNode[];
    similarities: number[];
    ids: string[];
}
export declare enum VectorStoreQueryMode {
    DEFAULT = "default",
    SPARSE = "sparse",
    HYBRID = "hybrid",
    SVM = "svm",
    LOGISTIC_REGRESSION = "logistic_regression",
    LINEAR_REGRESSION = "linear_regression",
    MMR = "mmr"
}
export declare enum FilterOperator {
    EQ = "==",// default operator (string, number)
    IN = "in",// In array (string or number)
    GT = ">",// greater than (number)
    LT = "<",// less than (number)
    NE = "!=",// not equal to (string, number)
    GTE = ">=",// greater than or equal to (number)
    LTE = "<=",// less than or equal to (number)
    NIN = "nin",// Not in array (string or number)
    ANY = "any",// Contains any (array of strings)
    ALL = "all",// Contains all (array of strings)
    TEXT_MATCH = "text_match",// full text match (allows you to search for a specific substring, token or phrase within the text field)
    CONTAINS = "contains"
}
export declare enum FilterCondition {
    AND = "and",
    OR = "or"
}
export type MetadataFilterValue = string | number | string[] | number[];
export interface MetadataFilter {
    key: string;
    value: MetadataFilterValue;
    operator: `${FilterOperator}`;
}
export interface MetadataFilters {
    filters: Array<MetadataFilter>;
    condition?: `${FilterCondition}`;
}
export interface MetadataInfo {
    name: string;
    type: string;
    description: string;
}
export interface VectorStoreInfo {
    metadataInfo: MetadataInfo[];
    contentInfo: string;
}
export interface VectorStoreQuery {
    queryEmbedding?: number[];
    similarityTopK: number;
    docIds?: string[];
    queryStr?: string;
    mode: VectorStoreQueryMode;
    alpha?: number;
    filters?: MetadataFilters;
    mmrThreshold?: number;
}
export interface VectorStoreNoEmbedModel {
    storesText: boolean;
    isEmbeddingQuery?: boolean;
    client(): any;
    add(embeddingResults: BaseNode[]): Promise<string[]>;
    delete(refDocId: string, deleteOptions?: any): Promise<void>;
    query(query: VectorStoreQuery, options?: any): Promise<VectorStoreQueryResult>;
}
export interface IEmbedModel {
    embedModel: BaseEmbedding;
}
export interface VectorStore extends VectorStoreNoEmbedModel, IEmbedModel {
}
export type VectorStoreByType = {
    [P in ModalityType]?: VectorStore;
};
export declare abstract class VectorStoreBase implements IEmbedModel {
    embedModel: BaseEmbedding;
    protected constructor(embedModel?: BaseEmbedding);
}

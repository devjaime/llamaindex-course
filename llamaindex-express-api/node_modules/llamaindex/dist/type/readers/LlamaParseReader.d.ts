import { Document } from "@llamaindex/core/schema";
import { FileReader, type Language, type ResultType } from "./type.js";
/**
 * Represents a reader for parsing files using the LlamaParse API.
 * See https://github.com/run-llama/llama_parse
 */
export declare class LlamaParseReader extends FileReader {
    apiKey: string;
    baseUrl: string;
    resultType: ResultType;
    checkInterval: number;
    maxTimeout: number;
    verbose: boolean;
    language: Language;
    parsingInstruction?: string;
    skipDiagonalText?: boolean;
    invalidateCache?: boolean;
    doNotCache?: boolean;
    fastMode?: boolean;
    doNotUnrollColumns?: boolean;
    pageSeparator?: string;
    pagePrefix?: string;
    pageSuffix?: string;
    gpt4oMode: boolean;
    gpt4oApiKey?: string;
    boundingBox?: string;
    targetPages?: string;
    ignoreErrors: boolean;
    splitByPage: boolean;
    useVendorMultimodalModel: boolean;
    vendorMultimodalModelName?: string;
    vendorMultimodalApiKey?: string;
    constructor(params?: Partial<LlamaParseReader>);
    private createJob;
    private getJobResult;
    /**
     * Loads data from a file and returns an array of Document objects.
     * To be used with resultType = "text" and "markdown"
     *
     * @param {Uint8Array} fileContent - The content of the file to be loaded.
     * @param {string} [fileName] - The optional name of the file to be loaded.
     * @return {Promise<Document[]>} A Promise object that resolves to an array of Document objects.
     */
    loadDataAsContent(fileContent: Uint8Array, fileName?: string): Promise<Document[]>;
    /**
     * Loads data from a file and returns an array of JSON objects.
     * To be used with resultType = "json"
     *
     * @param {string} filePathOrContent - The file path to the file or the content of the file as a Buffer
     * @return {Promise<Record<string, any>[]>} A Promise that resolves to an array of JSON objects.
     */
    loadJson(filePathOrContent: string | Uint8Array): Promise<Record<string, any>[]>;
    /**
     * Downloads and saves images from a given JSON result to a specified download path.
     * Currently only supports resultType = "json"
     *
     * @param {Record<string, any>[]} jsonResult - The JSON result containing image information.
     * @param {string} downloadPath - The path to save the downloaded images.
     * @return {Promise<Record<string, any>[]>} A Promise that resolves to an array of image objects.
     */
    getImages(jsonResult: Record<string, any>[], downloadPath: string): Promise<Record<string, any>[]>;
    private getImagePath;
    private fetchAndSaveImage;
    private filterSpecificParams;
    private splitTextBySeparator;
    static getMimeType(data: Uint8Array): Promise<{
        mime: string;
        extension: string;
    }>;
}

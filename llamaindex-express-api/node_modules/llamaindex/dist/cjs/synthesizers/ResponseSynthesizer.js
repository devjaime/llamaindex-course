"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ResponseSynthesizer", {
    enumerable: true,
    get: function() {
        return ResponseSynthesizer;
    }
});
const _schema = require("@llamaindex/core/schema");
const _utils = require("@llamaindex/core/utils");
const _Mixin = require("../prompts/Mixin.js");
const _builders = require("./builders.js");
class ResponseSynthesizer extends _Mixin.PromptMixin {
    responseBuilder;
    metadataMode;
    constructor({ responseBuilder, serviceContext, metadataMode = _schema.MetadataMode.NONE } = {}){
        super();
        this.responseBuilder = responseBuilder ?? (0, _builders.getResponseBuilder)(serviceContext);
        this.metadataMode = metadataMode;
    }
    _getPromptModules() {
        return {};
    }
    _getPrompts() {
        const prompts = this.responseBuilder.getPrompts?.();
        return {
            ...prompts
        };
    }
    _updatePrompts(promptsDict) {
        this.responseBuilder.updatePrompts?.(promptsDict);
    }
    async synthesize(query, stream) {
        const { nodesWithScore } = query;
        const textChunks = nodesWithScore.map(({ node })=>node.getContent(this.metadataMode));
        if (stream) {
            const response = await this.responseBuilder.getResponse({
                ...query,
                textChunks
            }, true);
            return (0, _utils.streamConverter)(response, (chunk)=>_schema.EngineResponse.fromResponse(chunk, true, nodesWithScore));
        }
        const response = await this.responseBuilder.getResponse({
            ...query,
            textChunks
        }, false);
        return _schema.EngineResponse.fromResponse(response, false, nodesWithScore);
    }
}

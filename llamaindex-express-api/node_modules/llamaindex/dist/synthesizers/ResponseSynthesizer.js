import { EngineResponse, MetadataMode } from "@llamaindex/core/schema";
import { streamConverter } from "@llamaindex/core/utils";
import { PromptMixin } from "../prompts/Mixin.js";
import { getResponseBuilder } from "./builders.js";
/**
 * A ResponseSynthesizer is used to generate a response from a query and a list of nodes.
 */ export class ResponseSynthesizer extends PromptMixin {
    responseBuilder;
    metadataMode;
    constructor({ responseBuilder, serviceContext, metadataMode = MetadataMode.NONE } = {}){
        super();
        this.responseBuilder = responseBuilder ?? getResponseBuilder(serviceContext);
        this.metadataMode = metadataMode;
    }
    _getPromptModules() {
        return {};
    }
    _getPrompts() {
        const prompts = this.responseBuilder.getPrompts?.();
        return {
            ...prompts
        };
    }
    _updatePrompts(promptsDict) {
        this.responseBuilder.updatePrompts?.(promptsDict);
    }
    async synthesize(query, stream) {
        const { nodesWithScore } = query;
        const textChunks = nodesWithScore.map(({ node })=>node.getContent(this.metadataMode));
        if (stream) {
            const response = await this.responseBuilder.getResponse({
                ...query,
                textChunks
            }, true);
            return streamConverter(response, (chunk)=>EngineResponse.fromResponse(chunk, true, nodesWithScore));
        }
        const response = await this.responseBuilder.getResponse({
            ...query,
            textChunks
        }, false);
        return EngineResponse.fromResponse(response, false, nodesWithScore);
    }
}
